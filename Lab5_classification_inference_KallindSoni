{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":320111,"sourceType":"datasetVersion","datasetId":134715},{"sourceId":193914763,"sourceType":"kernelVersion"}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import torch\nimport transformers\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn import model_selection, metrics","metadata":{"execution":{"iopub.status.busy":"2024-08-24T17:42:55.629202Z","iopub.execute_input":"2024-08-24T17:42:55.629607Z","iopub.status.idle":"2024-08-24T17:43:01.589688Z","shell.execute_reply.started":"2024-08-24T17:42:55.629568Z","shell.execute_reply":"2024-08-24T17:43:01.588263Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"class TextDataset:\n    \n    def __init__(self, data):\n        self.data = data\n        \n    def __len__(self):\n        return self.data.shape[0]\n    \n    def __getitem__(self, idx):\n        row = self.data.iloc[idx]\n        \n        enc = tokenizer(\n            row[\"text\"],\n            max_length=10,\n            truncation=True,\n            padding=\"max_length\"\n        )\n        \n        return {\n            \"input_ids\": torch.tensor(enc[\"input_ids\"]),\n            \"attention_mask\": torch.tensor(enc[\"attention_mask\"]),\n            # \"label\": torch.tensor(row[\"label\"]),\n        }","metadata":{"execution":{"iopub.status.busy":"2024-08-24T17:43:01.592061Z","iopub.execute_input":"2024-08-24T17:43:01.592833Z","iopub.status.idle":"2024-08-24T17:43:01.604178Z","shell.execute_reply.started":"2024-08-24T17:43:01.592770Z","shell.execute_reply":"2024-08-24T17:43:01.602463Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/imdb-dataset-of-50k-movie-reviews/IMDB Dataset.csv\").rename(columns={\"review\": \"text\"})\n\nid2label = {0: \"negative\", 1: \"positive\"}\nlabel2id = {label: id_ for id_, label in id2label.items()}\n\ndf[\"label\"] = df[\"sentiment\"].map(label2id)\n\nprint(df.shape)\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-24T17:43:28.339234Z","iopub.execute_input":"2024-08-24T17:43:28.339753Z","iopub.status.idle":"2024-08-24T17:43:29.919916Z","shell.execute_reply.started":"2024-08-24T17:43:28.339699Z","shell.execute_reply":"2024-08-24T17:43:29.918582Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"(50000, 3)\n","output_type":"stream"},{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"                                                text sentiment  label\n0  One of the other reviewers has mentioned that ...  positive      1\n1  A wonderful little production. <br /><br />The...  positive      1\n2  I thought this was a wonderful way to spend ti...  positive      1\n3  Basically there's a family where a little boy ...  negative      0\n4  Petter Mattei's \"Love in the Time of Money\" is...  positive      1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>sentiment</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>One of the other reviewers has mentioned that ...</td>\n      <td>positive</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A wonderful little production. &lt;br /&gt;&lt;br /&gt;The...</td>\n      <td>positive</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>I thought this was a wonderful way to spend ti...</td>\n      <td>positive</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Basically there's a family where a little boy ...</td>\n      <td>negative</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Petter Mattei's \"Love in the Time of Money\" is...</td>\n      <td>positive</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"tokenizer = transformers.AutoTokenizer.from_pretrained(\"/kaggle/input/lab5-classfication-training/results\")\nmodel = transformers.AutoModelForSequenceClassification.from_pretrained(\"/kaggle/input/lab5-classfication-training/results\")","metadata":{"execution":{"iopub.status.busy":"2024-08-24T18:02:35.394874Z","iopub.execute_input":"2024-08-24T18:02:35.395381Z","iopub.status.idle":"2024-08-24T18:02:37.239649Z","shell.execute_reply.started":"2024-08-24T18:02:35.395337Z","shell.execute_reply":"2024-08-24T18:02:37.238071Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"ds = TextDataset(df)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T18:03:04.316334Z","iopub.execute_input":"2024-08-24T18:03:04.317110Z","iopub.status.idle":"2024-08-24T18:03:04.322859Z","shell.execute_reply.started":"2024-08-24T18:03:04.317059Z","shell.execute_reply":"2024-08-24T18:03:04.321452Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"dl = torch.utils.data.DataLoader(\n    ds,\n    batch_size=2,\n    shuffle=False,\n    num_workers=2,\n)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T18:03:31.414127Z","iopub.execute_input":"2024-08-24T18:03:31.414584Z","iopub.status.idle":"2024-08-24T18:03:31.421074Z","shell.execute_reply.started":"2024-08-24T18:03:31.414541Z","shell.execute_reply":"2024-08-24T18:03:31.419709Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for idx, batch in enumerate(dl):\n    print(batch)\n    \n    batch = {k: v for k, v in batch.items()}\n    \n    with torch.no_grad():\n        out = model(input_ids=batch[\"input_ids\"], attention_mask=batch[\"attention_mask\"])\n    \n    if idx == 5:\n        break","metadata":{"execution":{"iopub.status.busy":"2024-08-24T18:04:35.765433Z","iopub.execute_input":"2024-08-24T18:04:35.765954Z","iopub.status.idle":"2024-08-24T18:04:37.052926Z","shell.execute_reply.started":"2024-08-24T18:04:35.765910Z","shell.execute_reply":"2024-08-24T18:04:37.051479Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"{'input_ids': tensor([[  101,  2028,  1997,  1996,  2060, 15814,  2038,  3855,  2008,   102],\n        [  101,  1037,  6919,  2210,  2537,  1012,  1026,  7987,  1013,   102]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])}\n{'input_ids': tensor([[  101,  1045,  2245,  2023,  2001,  1037,  6919,  2126,  2000,   102],\n        [  101, 10468,  2045,  1005,  1055,  1037,  2155,  2073,  1037,   102]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])}\n{'input_ids': tensor([[ 101, 9004, 3334, 4717, 7416, 1005, 1055, 1000, 2293,  102],\n        [ 101, 2763, 2026, 2035, 1011, 2051, 5440, 3185, 1010,  102]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])}\n{'input_ids': tensor([[  101,  1045,  2469,  2052,  2066,  2000,  2156,  1037, 15218,   102],\n        [  101,  2023,  2265,  2001,  2019,  6429,  1010,  4840,  1004,   102]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])}\n{'input_ids': tensor([[  101,  6628,  2011,  1996,  3893,  7928,  2055,  2023,  2143,   102],\n        [  101,  2065,  2017,  2066,  2434,  9535, 16255,  8450,  7239,   102]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])}\n{'input_ids': tensor([[  101,  6316,  1996,  7344,  2003,  2028,  1997,  2216, 21864,   102],\n        [  101,  1045,  2387,  2023,  3185,  2043,  1045,  2001,  2055,   102]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])}\n","output_type":"stream"}]},{"cell_type":"code","source":"batch","metadata":{"execution":{"iopub.status.busy":"2024-08-24T18:04:45.055871Z","iopub.execute_input":"2024-08-24T18:04:45.056654Z","iopub.status.idle":"2024-08-24T18:04:45.067616Z","shell.execute_reply.started":"2024-08-24T18:04:45.056596Z","shell.execute_reply":"2024-08-24T18:04:45.066292Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"{'input_ids': tensor([[  101,  6316,  1996,  7344,  2003,  2028,  1997,  2216, 21864,   102],\n         [  101,  1045,  2387,  2023,  3185,  2043,  1045,  2001,  2055,   102]]),\n 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])}"},"metadata":{}}]},{"cell_type":"code","source":"model.eval()","metadata":{"execution":{"iopub.status.busy":"2024-08-24T18:04:51.423766Z","iopub.execute_input":"2024-08-24T18:04:51.424254Z","iopub.status.idle":"2024-08-24T18:04:51.435435Z","shell.execute_reply.started":"2024-08-24T18:04:51.424210Z","shell.execute_reply":"2024-08-24T18:04:51.433909Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"BertForSequenceClassification(\n  (bert): BertModel(\n    (embeddings): BertEmbeddings(\n      (word_embeddings): Embedding(30522, 256, padding_idx=0)\n      (position_embeddings): Embedding(512, 256)\n      (token_type_embeddings): Embedding(2, 256)\n      (LayerNorm): LayerNorm((256,), eps=1e-12, elementwise_affine=True)\n      (dropout): Dropout(p=0.1, inplace=False)\n    )\n    (encoder): BertEncoder(\n      (layer): ModuleList(\n        (0-5): 6 x BertLayer(\n          (attention): BertAttention(\n            (self): BertSdpaSelfAttention(\n              (query): Linear(in_features=256, out_features=256, bias=True)\n              (key): Linear(in_features=256, out_features=256, bias=True)\n              (value): Linear(in_features=256, out_features=256, bias=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n            (output): BertSelfOutput(\n              (dense): Linear(in_features=256, out_features=256, bias=True)\n              (LayerNorm): LayerNorm((256,), eps=1e-12, elementwise_affine=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n          )\n          (intermediate): BertIntermediate(\n            (dense): Linear(in_features=256, out_features=1024, bias=True)\n            (intermediate_act_fn): GELUActivation()\n          )\n          (output): BertOutput(\n            (dense): Linear(in_features=1024, out_features=256, bias=True)\n            (LayerNorm): LayerNorm((256,), eps=1e-12, elementwise_affine=True)\n            (dropout): Dropout(p=0.1, inplace=False)\n          )\n        )\n      )\n    )\n    (pooler): BertPooler(\n      (dense): Linear(in_features=256, out_features=256, bias=True)\n      (activation): Tanh()\n    )\n  )\n  (dropout): Dropout(p=0.1, inplace=False)\n  (classifier): Linear(in_features=256, out_features=2, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"pipe = transformers.pipeline(\n    \"text-classification\",\n    model=\"/kaggle/input/lab5-classfication-training/results\",\n    batch_size=4\n)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T18:05:23.388438Z","iopub.execute_input":"2024-08-24T18:05:23.388973Z","iopub.status.idle":"2024-08-24T18:05:41.183573Z","shell.execute_reply.started":"2024-08-24T18:05:23.388926Z","shell.execute_reply":"2024-08-24T18:05:41.182335Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"pipe([\"I am happy with the movie\"])","metadata":{"execution":{"iopub.status.busy":"2024-08-24T18:05:49.486467Z","iopub.execute_input":"2024-08-24T18:05:49.487300Z","iopub.status.idle":"2024-08-24T18:05:49.519433Z","shell.execute_reply.started":"2024-08-24T18:05:49.487251Z","shell.execute_reply":"2024-08-24T18:05:49.518184Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"[{'label': 'LABEL_1', 'score': 0.9958038926124573}]"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}